from typing import Union
import aiohttp
import random
import string

class YoomoneyAPI:
    def __init__(self, token: str = None):
        self.token = token
        self.client_id = "20E7D579DBAB90D4468FAB31D10940E2A5D69AB9994497CA0D4EF8444673F051"
        self.base_url = 'https://yoomoney.ru/api/'
        self.account = None
        self.headers = {
            'Authorization': f'Bearer {self.token}',
            'Content-Type': 'application/x-www-form-urlencoded',
        }
        self.session = aiohttp.ClientSession()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—à–µ–ª—å–∫–∞
    async def check(self) -> str:
        status, response = await self._request("account-info")

        if status:
            if len(response) >= 1:
                text_identified = "–ò–º–µ–µ—Ç—Å—è" if response['identified'] else "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"

                text_status = {
                    "identified": "–ò–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç",
                    "anonymous": "–ê–Ω–æ–Ω–∏–º–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç",
                    "named": "–ò–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç"
                }.get(response['account_status'], response['account_status'])

                text_type = {
                    "personal": "–õ–∏—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç",
                    "professional": "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç"
                }.get(response['account_type'], response['account_type'])

                return f"""
                    –ö–æ—à–µ–ª–µ–∫ YooMoney –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ–Ω.
                    –ö–æ—à–µ–ª–µ–∫: {response['account']}
                    –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: {text_identified}
                    –°—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞: {text_status}
                    –¢–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞: {text_type}
                """
            else:
                return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—à–µ–ª–µ–∫ YooMoney."
        else:
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—à–µ–ª–µ–∫ YooMoney."

    async def authorization_get(self) -> str:
        headers = {'Content-Type': 'application/x-www-form-urlencoded'}
        url = f"https://yoomoney.ru/oauth/authorize?client_id={self.client_id}B&response_type=code&redirect_uri=https://yoomoney.ru&scope=account-info%20operation-history%20operation-details"

        async with aiohttp.ClientSession() as session:
            async with session.post(url, headers=headers) as response:
                return str(response.url)

    # –ü—Ä–∏–Ω—è—Ç–∏–µ –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
    async def authorization_enter(self, get_code: str) -> tuple[bool, str, str]:
        headers = {'Content-Type': 'application/x-www-form-urlencoded'}
        url = f"https://yoomoney.ru/oauth/token?code={get_code}&client_id={self.client_id}B&grant_type=authorization_code&redirect_uri=https://yoomoney.ru"

        async with aiohttp.ClientSession() as session:
            async with session.post(url, headers=headers) as response:
                response_data = await response.json()

                if "error" in response_data:
                    error = response_data['error']
                    if error == "invalid_request":
                        return False, "", "<b>‚ùå –¢—Ä–µ–±—É–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ –∏–º–µ—é—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏–ª–∏ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è</b>"
                    elif error == "unauthorized_client":
                        return False, "", f"""
                            <b>‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ 'client_id' –∏–ª–∏ 'client_secret', –∏–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
                            –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ÆMoney –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –µ–≥–æ 'client_id')</b>
                        """
                    elif error == "invalid_grant":
                        return False, "", f"""
                            <b>‚ùå –í –≤—ã–ø—É—Å–∫–µ 'access_token' –æ—Ç–∫–∞–∑–∞–Ω–æ. –ÆMoney –Ω–µ –≤—ã–ø—É—Å–∫–∞–ª –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω,
                            —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞ –∏—Å—Ç–µ–∫, –∏–ª–∏ —ç—Ç–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω —É–∂–µ –≤—ã–¥–∞–Ω
                            'access_token' (–ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å —Ç–µ–º –∂–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º)</b>
                        """

                if response_data['access_token'] == "":
                    return False, "", "<b>‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.</b>"

                return True, response_data['access_token'], "<b>üîÆ –ÆMoney –∫–æ—à–µ–ª–µ–∫ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω ‚úÖ</b>"

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
    async def balance(self) -> str:
        status, response = await self._request("account-info")

        if status:
            wallet_balance = response['balance']
            wallet_number = await self.account_info()

            return f"""
                –ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞ YooMoney
                –ö–æ—à–µ–ª–µ–∫: {wallet_number}
                –ë–∞–ª–∞–Ω—Å: {wallet_balance} RUB
            """
        else:
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞ YooMoney."

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
    async def account_info(self):
        status, response = await self._request("account-info")

        self.account = response['account']

        return response['account']

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
    async def bill(self, pay_amount: Union[float, int]) -> tuple[str, str, str]:
        """
        :return:
        (—Å–æ–æ–±—â–µ–Ω–∏–µ, —Å—Å—ã–ª–∫–∞, –∞–π–¥–∏)
        """
        bill_receipt = self.gen_id()

        get_wallet = self.account or await self.account_info()
        url = "https://yoomoney.ru/quickpay/confirm.xml?"

        pay_amount_bill = pay_amount + (pay_amount * 0.031)

        if float(pay_amount_bill) < 2:
            pay_amount_bill = 2.04

        payload = {
            'receiver': get_wallet,
            'quickpay_form': "button",
            'targets': '–ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ',
            'paymentType': 'SB',
            'sum': pay_amount_bill,
            'label': bill_receipt,
        }

        for value in payload:
            url += str(value).replace("_", "-") + "=" + str(payload[value])
            url += "&"

        async with aiohttp.ClientSession() as session:
            async with session.post(url[:-1].replace(" ", "%20")) as response:
                bill_link = str(response.url)

        bill_message = f"""
            –ü–ª–∞—Ç–µ–∂
            –î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –æ–ø–ª–∞—Ç–∏—Ç–µ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π —Å—á–µ—Ç
            –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞: {pay_amount} RUB
            –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂'
        """

        return bill_message, bill_link, bill_receipt

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞
    async def bill_check(self, bill_receipt: Union[str, int] = None, records: int = 1) -> tuple[int, str]:
        data = {
            'type': 'deposition',
            'details': 'true',
        }

        if bill_receipt is not None:
            data['label'] = bill_receipt
        if records is not None:
            data['records'] = records

        status, response = await self._request("operation-history", data)

        operations = response['operations']
        if not operations:
            return 2, "–ó–∞–∫–∞–∑ –Ω–µ –æ–ø–ª–∞—á–µ–Ω"
        if any(op['amount_currency'] == "RUB" for op in operations):
            return 0, "pass"
        elif len(operations) >= 1:
            return 4, "–î—Ä—É–≥–∞—è –≤–∞–ª—é—Ç–∞"
        return 1, "–°—á–µ—Ç –∏—Å—Ç–µ–∫"

    # –ó–∞–ø—Ä–æ—Å
    async def _request(self, method: str, data: dict = None) -> tuple[bool, any]:
        url = self.base_url + method

        async with self.session.post(url, headers=self.headers, data=data) as response:
            try:
                response_data = await response.json()
                if response.status == 200:
                    return True, response_data
                else:
                    return False, response_data
            except Exception as ex:
                return False, str(ex)

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID
    def gen_id(self):
        return ''.join(random.choices(string.ascii_uppercase + string.digits, k=10))
