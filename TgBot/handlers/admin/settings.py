from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State
from aiogram.types import CallbackQuery, Message
from tonutils.wallet.utils import validate_mnemonic

from APIs.ton_api import api, GetProfileError, BadRequest
from TgBot import CBT, keyboards as kbs
from TgBot.bot import logger
from config import cfg
from utils.tools import load_cookies

router = Router()

async def answer_settings(update: Message | CallbackQuery, st: FSMContext):
    msg = (await st.get_data()).get("msg")
    if msg and (not isinstance(update, CallbackQuery) or msg.message_id != update.message.message_id):
        await msg.delete()
    text = f"""‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞</b>

‚àü –ö–∞–Ω–∞–ª: {f"@{cfg.channel_username.strip('@')}" if cfg.channel_username else '–ù–µ—Ç'}
‚àü –ù–∏–∫ –ø–æ–¥–¥–µ—Ä–∂–∫–∏: {f"@{cfg.support_username.strip('@')}" if cfg.support_username else '–ù–µ—Ç'}

‚àü –ë–∞–ª–∞–Ω—Å: <code>{await api.get_balance()}</code> TON
‚àü –¢–æ–∫–µ–Ω TON API: <code>{api.api_key or '–ù–µ—Ç'}</code>
‚àü –°–∏–¥-—Ñ—Ä–∞–∑–∞: {", ".join(api.mnemonic) if api.mnemonic else '<b>–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞</b>'}

‚àü –ö—É–∫–∏: <b>{'–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã' if api.cookie else '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã'}</b>
‚àü –•–µ—à: <code>{api.hash or '–ù–µ—Ç'}</code>

‚àü –¢–µ–≥: @{api.username.strip('@') if api.username else '–ù–µ—Ç'}
‚àü –ò–º—è: {api.name or '–ù–µ—Ç'}
            """
    if isinstance(update, CallbackQuery):
        await update.message.edit_text(text, reply_markup=kbs.settings_admin_kb())
    else:
        await update.answer(text, reply_markup=kbs.settings_admin_kb())
    await st.clear()

@router.callback_query(F.data == CBT.ADMIN_PANEL_SETTINGS)
async def open_settings_admin(c: CallbackQuery, state: FSMContext):
    await answer_settings(c, state)

@router.callback_query(F.data == CBT.EDIT_CHANNEL)
async def edit_channel(c: CallbackQuery, state: FSMContext):
    msg = await c.message.edit_text("–û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—ã–π –Ω–∏–∫ –∫–∞–Ω–∞–ª–∞", reply_markup=kbs.kb(
        kbs.Btn("üîô –ù–∞–∑–∞–¥", CBT.ADMIN_PANEL_SETTINGS)))
    await state.set_state(State(c.data))
    await state.update_data(msg=msg)

@router.message(State(CBT.EDIT_CHANNEL))
async def edit_channel_handler(m: Message, state: FSMContext):
    try:
        if m.text != '-':
            t = m.text.strip("@")
            channel = await m.bot.get_chat((t.rjust(len(t) + 1, "@") if (not t.isdigit() and not t.startswith("-100")) else int(t)))
            if not (await channel.get_member((await m.bot.me()).id)).can_invite_users:
                raise Exception
            us = channel.username
        else:
            us = ''
    except Exception as e:
        logger.info(f"–ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª @{m.text}: {str(e)}")
        await (await state.get_data()).get("msg").delete()
        await m.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞–Ω–∞–ª",
                       reply_markup=kbs.kb(kbs.Btn("üîô –ù–∞–∑–∞–¥", CBT.ADMIN_PANEL_SETTINGS)))
        await state.clear()
        return

    cfg.channel_username = us
    cfg.save()
    await answer_settings(m, state)


@router.callback_query(F.data == CBT.EDIT_SUPPORT_CONTACT)
async def edit_channel(c: CallbackQuery, state: FSMContext):
    msg = await c.message.edit_text("–û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—ã–π –Ω–∏–∫ –ø–æ–¥–¥–µ—Ä–∂–∫–∏", reply_markup=
            kbs.kb(kbs.Btn("üîô –ù–∞–∑–∞–¥", CBT.ADMIN_PANEL_SETTINGS)))
    await state.set_state(State(c.data))
    await state.update_data(msg=msg)

@router.message(State(CBT.EDIT_SUPPORT_CONTACT))
async def edit_channel_handler(m: Message, state: FSMContext):
    cfg.support_username = m.text if m.text != '-' else ''
    cfg.save()
    await answer_settings(m, state)

@router.callback_query(F.data == CBT.ADMIN_EDIT_REF_PERCENT)
async def edit_ref_percent(c: CallbackQuery, state: FSMContext):
    msg = await c.message.edit_text('–û—Ç–ø—Ä–∞–≤—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç', reply_markup=
    kbs.kb(kbs.Btn("üîô –ù–∞–∑–∞–¥", CBT.ADMIN_PANEL_SETTINGS)))
    await state.set_state(State(c.data))
    await state.update_data(msg=msg)

@router.message(State(CBT.ADMIN_EDIT_REF_PERCENT))
async def edit_ref_percent_handler(m: Message, state: FSMContext):
    try:
        ref_percent = float(m.text)
        if not (0 <= ref_percent <= 100):
            raise ValueError
    except ValueError:
        await m.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100.")
        return
    cfg.ref_percent = ref_percent
    cfg.save()
    await answer_settings(m, state)

@router.callback_query(F.data == CBT.ADMIN_EDIT_FEE_STEAM)
async def edit_fee_stars(c: CallbackQuery, state: FSMContext):
    msg = await c.message.edit_text('–û—Ç–ø—Ä–∞–≤—å –ø—Ä–æ—Ü–µ–Ω—Ç –∫–æ–º–∏—Å—Å–∏–∏ Stars', reply_markup=
            kbs.kb(kbs.Btn("üîô –ù–∞–∑–∞–¥", CBT.ADMIN_PANEL_SETTINGS)))
    await state.set_state(State(c.data))
    await state.update_data(msg=msg)

@router.message(State(CBT.ADMIN_EDIT_FEE_STEAM))
async def edit_fee_stars_handler(m: Message, state: FSMContext):
    try:
        fee_stars = float(m.text)
        if not (0 <= fee_stars <= 100):
            raise ValueError
    except ValueError:
        await m.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100.")
        return
    cfg.fee = fee_stars
    cfg.save()
    await answer_settings(m, state)

@router.callback_query(F.data == CBT.EDIT_COOKIES)
async def edit_cookies(c: CallbackQuery, state: FSMContext):
    msg = await c.message.edit_text('üç™ –û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—ã–µ –∫—É–∫–∏', reply_markup=
            kbs.kb(kbs.Btn("üîô –ù–∞–∑–∞–¥", CBT.ADMIN_PANEL_SETTINGS)))
    await state.set_state(State(c.data))
    await state.update_data(msg=msg)

@router.message(State(CBT.EDIT_COOKIES))
async def edit_cookies_handler(m: Message, state: FSMContext):
    r = load_cookies(m.text)
    if r == -1:
        return await m.answer(f"‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫—É–∫–∏</b>")
    api.cookie = r
    try:
        name, username = api.get_profile(api.cookie)
        api.name, api.username = name, username
        await api.init_profile()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –ø—Ä–æ—Ñ–∏–ª—è: {str(e)}")
        logger.debug("TRACEBACK", exc_info=True)
        await m.delete()
        await state.clear()
        return await m.answer(f"‚ùå <b>–ü—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –∫—É–∫–∏ –Ω–µ –ø–æ–¥—Ö–æ–¥—è—Ç</b>")
    cfg.cookies = r
    cfg.save()
    await answer_settings(m, state)

@router.callback_query(F.data == CBT.EDIT_MNEMONIC)
async def edit_seed_mneminoc(c: CallbackQuery, state: FSMContext):
    msg = await c.message.edit_text('üîê –û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—É—é —Å–∏–¥-—Ñ—Ä–∞–∑—É', reply_markup=
            kbs.kb(kbs.Btn("üîô –ù–∞–∑–∞–¥", CBT.ADMIN_PANEL_SETTINGS)))
    await state.set_state(State(c.data))
    await state.update_data(msg=msg)

@router.message(State(CBT.EDIT_MNEMONIC))
async def edit_seed_mnemonic_handler(m: Message, state: FSMContext):
    _words = list(map(str.strip, (m.text.split(',') if "," in m.text else m.text.split())))
    await state.clear()
    if len(_words) not in (12, 16, 24):
        return await m.answer(f"‚ùå <b>–°–∏–¥-—Ñ—Ä–∞–∑–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 12, 16 –∏–ª–∏ 24 –∞–Ω–≥–ª. —Å–ª–æ–≤</b>")
    api.mnemonic = _words
    cfg.mnemonic = _words
    cfg.save()
    api.init()
    await answer_settings(m, state)

@router.callback_query(F.data == CBT.EDIT_HASH)
async def edit_hash(c: CallbackQuery, state: FSMContext):
    msg = await c.message.edit_text('üë®üèº‚Äçüíª –û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—ã–π —Ö–µ—à', reply_markup=
            kbs.kb(kbs.Btn("üîô –ù–∞–∑–∞–¥", CBT.ADMIN_PANEL_SETTINGS)))
    await state.set_state(State(c.data))
    await state.update_data(msg=msg)

@router.message(State(CBT.EDIT_HASH))
async def edit_hash_handler(m: Message, state: FSMContext):
    await state.clear()
    old_hash = api.hash
    try:
        api.hash = m.text
        await api.search_stars_recipient('soxbz')
    except BadRequest as e:
        api.hash = old_hash
        return m.answer(f"üî© <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ö–µ—à</b>\n\n"
                        f"<code>{str(await e.response.text())}</code>")
    cfg.hash_fragment = api.hash
    api.init()
    cfg.save()
    await answer_settings(m, state)

@router.callback_query(F.data == CBT.EDIT_TON_API)
async def edit_ton_api(c: CallbackQuery, state: FSMContext):
    msg = await c.message.edit_text('üîë –û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—ã–π TON API-–∫–ª—é—á', reply_markup=
            kbs.kb(kbs.Btn("üîô –ù–∞–∑–∞–¥", CBT.ADMIN_PANEL_SETTINGS)))
    await state.set_state(State(c.data))
    await state.update_data(msg=msg)

@router.message(State(CBT.EDIT_TON_API))
async def edit_ton_api_handler(m: Message, state: FSMContext):
    api.api_key = m.text
    cfg.ton_api_key = m.text
    cfg.save()
    api.init()
    await answer_settings(m, state)