from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardButton as B, InlineKeyboardMarkup as K

from TgBot.bot import logger
from TgBot.enums import Stickers
from TgBot.keyboards import _gen_back_button

from TgBot.keyboards import payment_methods_kb, success_deposit
from TgBot.tools import notifications
from TgBot.tools.notifications import notify_admins_new_payment
from TgBot.tools.texts import refreal_menu
from TgBot.bot_utils import kb
from payments import check_pay, generate_inv
from TgBot.states import DepositState
from TgBot import CBT
from utils.database import db_users, db_invoices
from utils.database.db_invoices import Status, Invoice
import logging

from utils.tools import time_to_str

log = logging.getLogger(f"main.{__name__}")

router = Router()

@router.callback_query(F.data == CBT.DEPOSIT_BALANCE)
async def top_up_balance(c: CallbackQuery, state: FSMContext):
    await c.message.delete()
    msg = await c.message.answer(text="üíµ <b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:</b>",
                              reply_markup=_gen_back_button())
    await state.set_state(DepositState.enter_amount)
    await state.set_data({'msg': msg})

@router.message(DepositState.enter_amount)
async def enter_amount(m: Message, state: FSMContext):
    try:
        amount = float(m.text)
    except ValueError:
        return await m.answer("üö´ <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.</b>")
    msg = (await state.get_data()).get('msg')
    if msg:
        await msg.delete()
    await m.answer("üí≥ <b>–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã:</b>", reply_markup=payment_methods_kb(amount))
    await state.clear()

@router.callback_query(F.data.startswith(f"{CBT.PAYMENT_METHOD}:"))
async def choose_payment_method(c: CallbackQuery, state: FSMContext):
    amount, method = c.data.split(":")[1:]
    amount = float(amount)
    method = int(method)
    if len(db_invoices.get_invoices_by_user(c.from_user.id, status=Status.PENDING)) >= 10:
        return await c.message.edit_text('<b>‚ùå –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç —Å–æ–∑–¥–∞–≤–∞–µ–º—ã—Ö —Å—á–µ—Ç–æ–≤!</b>', reply_markup=_gen_back_button())
    res = await c.message.edit_reply_markup(reply_markup=kb(B(text='üïî –°–æ–∑–¥–∞–Ω–∏–µ —Å—á–µ—Ç–∞...', callback_data=CBT.EMPTY)))
    inv = db_invoices.add_invoice(Invoice(
        creator_id=c.from_user.id, payment_method=method, amount=float(amount)
    ))
    try:
        args = await generate_inv(inv)
        if all(v == -1 for v in args):
            logger.warning(f"–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã {method} ({type(method).__name__}) –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await res.delete()
            return await c.message.answer('<b>ü§∑‚Äç‚ôÇÔ∏è –ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω!</b>',
                      reply_markup=_gen_back_button())
        link, inv_id, text, new_amount = args
    except Exception as e:
        log.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {str(e)}")
        log.debug("TRACEBACK", exc_info=True)
        db_invoices.update_invoice(inv.id, status=Status.ERROR)
        await res.delete()
        return await c.message.answer(f"‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ —Å—á–µ—Ç–∞</b>")
    await res.delete()
    db_invoices.update_invoice(inv.id, inv_pay_id=inv_id, amount=new_amount, link=link)
    await c.message.answer((text or f"üí≥ <b>–°—É–º–º–∞: {amount} RUB</b>\n"
                           f"–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã: <b>{inv.method_name}</b>\n\n"
                           f" ‚Ä¢ –£ –≤–∞—Å –µ—Å—Ç—å <b>{time_to_str(inv.expiration_hours * 3600)}</b> –¥–ª—è –æ–ø–ª–∞—Ç—ã"),
                              reply_markup=gen_check_payment_menu(link, inv.id))
    await state.clear()

def gen_check_payment_menu(link, order_id):
    kb = []
    if link:
        kb.append([B(text="–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=link)])
    kb.append([B(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data=f"{CBT.CHECK_PAYMENT}:{order_id}")])
    return K(inline_keyboard=kb)

@router.callback_query(F.data.startswith(f"{CBT.CHECK_PAYMENT}:"))
async def check_payment(c: CallbackQuery, state: FSMContext):
    inv_id = c.data.split(":")[-1]
    if db_invoices.is_invoice_expired(inv_id):
        db_invoices.update_invoice(inv_id, status=Status.EXPIRED)
        await c.message.delete_reply_markup()
        return await c.message.reply("<b>‚è±Ô∏è –°—Ä–æ–∫ –æ–ø–ª–∞—Ç—ã –ø–ª–∞—Ç–µ–∂–∞ –∏—Å—Ç—ë–∫</b>")
    inv = db_invoices.get_invoice(inv_id)
    result = await check_pay(inv)
    if result == 'not found':
        db_invoices.update_invoice(inv_id, status=Status.CANCELED)
        await c.message.delete()
        await c.message.answer('<b>üóë –°—á—ë—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª –æ—Ç–º–µ–Ω—ë–Ω</b>')
    if result == 1:
        db_invoices.update_invoice(inv_id, status=Status.PAID)
        db_users.add_balance(inv.creator_id, inv.amount)
        await c.message.delete()
        await c.message.answer_sticker(Stickers.RICH_DUCK)
        await c.message.answer(f"<b>ü™ô –°—á—ë—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω.</b>\n\n"
                                  f"–ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –Ω–∞—á–∏—Å–ª–µ–Ω–æ <code>{inv.amount}</code> {inv.currency}",
                               reply_markup=success_deposit())
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {inv.user.id} –ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å –Ω–∞ {inv.amount} {inv.currency}. "
                    f"–ü—Ä–∏–≥–ª–∞—Å–∏–ª: {inv.user.invited_by or '–ù–∏–∫—Ç–æ'}")
        if inv.user.invited_by:
            invited_by = db_users.get_user(_id=inv.user.invited_by)
            await notifications.notify_user_new_referral(c.bot, invited_by, inv.user, inv.amount, inv.currency)
        await notify_admins_new_payment(c.bot, inv)
    else:
        await c.answer('–°—á–µ—Ç –Ω–µ –±—ã–ª –æ–ø–ª–∞—á–µ–Ω!')

# ============== —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ ============ #


@router.callback_query(F.data == CBT.REFERRAL_SYSTEM)
async def referral_system(c: CallbackQuery):
    user = db_users.get_user(user_id=c.from_user.id)
    await c.message.delete()
    await c.message.answer(refreal_menu(user, (await c.bot.me()).username), reply_markup=_gen_back_button())

