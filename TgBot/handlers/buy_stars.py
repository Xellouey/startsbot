from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from TgBot.bot import logger
from TgBot.bot_utils import answer_with_banner, edit_msg, check_sub_channel
from TgBot.states import StarsState
from TgBot import CBT
from TgBot.keyboards import buy_stars, stars_dep_confirm_kb, _gen_back_button, go_deposit, dodep_stars, waiting, req_sub

from APIs.ton_api import (api, NotFindedUsername, CantGiftUsername, InsufficientFundsError, FragmentAPIError,
                          BadRequest,
                          ton_to_rub)
from TgBot.tools.notifications import notify_success_stars_deposit
from config import cfg
from utils.database import db_stars_orders, db_users

router = Router()

@router.callback_query(F.data.startswith(CBT.OPEN_MENU))
async def open_stars_deposit_menu(c: CallbackQuery, state: FSMContext):
    if not await check_sub_channel(c.bot, c.from_user.id):
        await c.message.answer(
            f"""üëã <b>–ü—Ä–∏–≤–µ—Ç, {c.from_user.full_name}!</b>

–ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏:""",
            reply_markup=req_sub()
        )
        return
    try:
        star_price = await api.star_price()
        if cfg.fee:
            msg = f'ü™ô <b>1 Telegram Stars = {round((star_price * (1 + (cfg.fee / 100))) * ton_to_rub(), 2)} RUB</b>'
        else:
            msg = "\n".join([f"‚Ä¢ –î–æ <b>{rng[0][1]}</b> –∑–≤—ë–∑–¥ <b>{rng[1]}</b> RUB" for rng in list(cfg.course.values())])
        text = f"""‚≠êÔ∏è <b>–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã:</b>

{msg}"""
        if c.data.split(":")[-1] == '1':
            await c.message.delete_reply_markup()
        else:
            await c.message.delete()
        await answer_with_banner(c.message, text, reply_kb=buy_stars())
        await state.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–µ–Ω—é: {e}")
        logger.debug('TRACEBACK', exc_info=True)
        await c.message.answer("‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ü–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</b>")
        await state.clear()

@router.callback_query(F.data.startswith(CBT.BUY))
async def pick_currency(c: CallbackQuery, state: FSMContext):
    if not api.inited:
        await c.answer("–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∏–¥—É—Ç —Ç–µ—Ö. —Ä–∞–±–æ—Ç—ã!")
        return
    try:
        balance = await api.get_balance()
        star_price = await api.star_price()
        if balance <= 50 * star_price:
            logger.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥")
            await c.answer("–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∏–¥—É—Ç —Ç–µ—Ö. —Ä–∞–±–æ—Ç—ã!")
            return
        _min = 50
        _max = int(balance // star_price)
        await state.set_state(StarsState.wait_amount)
        await state.update_data()
        await c.message.delete()
        msg = await c.message.answer(
            f"‚≠êÔ∏è –í–≤–µ–¥–∏ –∫–æ–ª-–≤–æ Telegram Stars:\n\n- –û—Ç <b>{_min}</b> –¥–æ <b>{_max}</b>",
            reply_markup=_gen_back_button(CBT.OPEN_MENU)
        )
        await state.update_data(max=_max, min=_min, msg=msg)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤–∞–ª—é—Ç—ã: {e}")
        await c.answer("‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±–∞–ª–∞–Ω—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</b>")
        await state.clear()

@router.message(StarsState.wait_amount)
async def send_amount(m: Message, state: FSMContext):
    try:
        amount = int(m.text)
    except ValueError:
        await m.answer("‚ùå <b>–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É</b>")
        return
    st = await state.get_data()
    _max, _min = st['max'], st['min']
    if amount < _min or amount > _max:
        await m.answer(f"‚ùå <b>–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç <code>{_min}</code> –¥–æ <code>{_max}</code></b>")
        return
    await state.update_data(amount=amount)
    msg = st.get('msg')
    if msg:
        await msg.delete()
    await m.answer(
        f"üë§ –û—Ç–ø—Ä–∞–≤—å @username. –°—É–º–º–∞: <b>{amount} Stars</b>",
        reply_markup=_gen_back_button(CBT.OPEN_MENU)
    )
    await state.set_state(StarsState.wait_login)

@router.message(StarsState.wait_login)
async def send_login(m: Message, state: FSMContext):
    st = await state.get_data()
    login, amount = m.text.strip("@"), st['amount']
    if login.startswith("https://t.me/"):
        login = login.replace("https://t.me/", "")
    try:
        await api.search_stars_recipient(login)
    except NotFindedUsername:
        await m.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>@{login}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    except CantGiftUsername:
        await m.answer(f"‚ùå <b>–ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–≤–µ–∑–¥—ã –Ω–∞ @{login}</b>")
        return
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ username: {e}")
        await m.answer("‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</b>")
        await state.clear()
        return
    try:
        if cfg.fee:
            to_pay = round(((await api.star_price() * (1 + (cfg.fee / 100))) * amount) * ton_to_rub(), 2)
        else:
            to_pay = round(amount * cfg.get_course(amount), 2)
        await state.clear()
        await m.answer(
            f"üîé <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ</b>\n\n"
            f"‚àü –í–∞—à —é–∑–µ—Ä–Ω–µ–π–º (—Ç–µ–≥): ¬´<b>{login}</b>¬ª\n"
            f"‚àü –°—É–º–º–∞: <b>{amount}</b> Telegram Stars\n\n"
            f"üí≥ –ö –æ–ø–ª–∞—Ç–µ: <b>{to_pay} RUB</b>\n\n"
            f"–ï—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ, –Ω–∞–∂–º–∏—Ç–µ ¬´<b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</b>¬ª",
            reply_markup=stars_dep_confirm_kb(amount, login, to_pay=to_pay)
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")
        await m.answer("‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</b>")
        await state.clear()

@router.callback_query(F.data.startswith(CBT.CONFIRM_BUY))
async def confirm_buy(c: CallbackQuery, state: FSMContext):
    to_pay, amount, login = c.data.split(":")[1:]
    to_pay, amount = float(to_pay), int(amount)
    user = db_users.get_user(c.from_user.id)
    await state.clear()
    if user.balance < to_pay:
        await edit_msg(c.message, '<b>üòì –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –æ–ø–ª–∞—Ç—ã!</b>', reply_markup=go_deposit())
        return
    await c.message.delete()
    res = await c.message.answer(f"‚≠êÔ∏è <b>–û—Ç–ø—Ä–∞–≤–ª—è–µ–º Telegram –∑–≤—ë–∑–¥—ã...</b>", reply_markup=waiting())
    try:
        result = await api.send_stars_async(login, amount)
    except NotFindedUsername:
        await res.delete()
        await c.message.answer(f'<b>‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è >@{login} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!</b>', reply_markup=dodep_stars())
        return
    except CantGiftUsername:
        await res.delete()
        await c.message.answer(f'<b>‚ùå –ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–≤–µ–∑–¥—ã –Ω–∞ @{login}!</b>', reply_markup=dodep_stars())
        return
    except InsufficientFundsError as e:
        await res.delete()
        logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ TON: –Ω—É–∂–Ω–æ {e.price}, –±–∞–ª–∞–Ω—Å {e.balance}")
        await c.message.answer(f'<b>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–≤–µ–∑–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</b>', reply_markup=dodep_stars())
        return
    except BadRequest:
        await res.delete()
        logger.error("–ù–µ–≤–µ—Ä–Ω—ã–π hash –∏–ª–∏ –∫—É–∫–∏ –≤ API")
        await c.message.answer(f'<b>‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.</b>', reply_markup=dodep_stars())
        return
    except FragmentAPIError as e:
        await res.delete()
        logger.error(f"–û—à–∏–±–∫–∞ API Fragment: {e}")
        await c.message.answer(f'<b>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–≤–µ–∑–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</b>', reply_markup=dodep_stars())
        return
    except Exception as e:
        await res.delete()
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ stars: {e}")
        logger.debug("TRACEBACK", exc_info=True)
        await c.message.answer(f'<b>‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</b>', reply_markup=dodep_stars())
        return
    amount_ton, tx_hash, amount_stars, username = result[:4]
    order = db_stars_orders.add_order(db_stars_orders.StarsOrder(
        stars_amount=amount_stars,
        total=to_pay,
        username=username,
        user_id=c.from_user.id,
        tx_hash=tx_hash,
        amount_ton=amount_ton
    ))
    logger.info(f"{c.from_user.id} –∫—É–ø–∏–ª {amount_stars} –∑–≤–µ–∑–¥ –Ω–∞ —é–∑–µ—Ä–Ω–µ–π–º @{login}. –¢—Ä–∞–Ω–∑–∞: {tx_hash}. –°—É–º–º–∞: {amount_ton}")
    db_users.add_balance(c.from_user.id, -to_pay)
    await res.delete()
    await answer_with_banner(
        c.message,
        f"üí´ <b>–ó–≤—ë–∑–¥—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!</b>\n\n"
        f"‚àü –°—É–º–º–∞: <b>{order.stars_amount} Stars</b>\n"
        f"‚àü –ü–æ–ª—É—á–∞—Ç–µ–ª—å: <b>@{order.username}</b>\n\n"
        f"–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ –µ—â–µ! ‚ù§Ô∏è",
        reply_kb=dodep_stars()
    )
    await notify_success_stars_deposit(c.bot, order)